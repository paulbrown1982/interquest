/* This file contains funtions intended to be used for persistent storage of game data. *//*        This method will return HTML 5 local storage if supported or return false if not present.          return: True if HTML 5 local storage is available or false if it is not available.  */function isHtml5StorageAvailable() {    try {        return 'localStorage' in window && window['localStorage'] !== null;    }     catch (e) {        return false;    }}/*     Try and get the storage mechanism. HTML 5 local storage will be used if available.          Return: Some kind of local storage. This is either HTML 5 local storage or a dummy temporary object. */function getStorage() {    if (!isHtml5StorageAvailable) {        /* Dummy temporary local storage object. */        window.localStorage = new Object();            }    return localStorage;}/*     Safe storage of a value into the local storage.      This method protects against the possibility that the browser does not have local storage.        Param : key The unique key used to store the value    Param : value The value to be stored under that key.    Return: The old value as a String if a value was prevously stored under that key.               True if a new value was stored successfully. False if a value failed to be stored. */function store(key, value) {    var storage = getStorage();    if (storage != null) {        var existing = storage[key];        storage[key] = value;        return existing;    }    else {        return false;        }}/*    Mechanism to retrieve a value under a specified key.         Return: The value stored under the specified key or null if no value is stored under that key. */function retrieve(key) {    }