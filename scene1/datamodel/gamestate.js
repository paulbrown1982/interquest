/* This file contains funtions intended to be used for persistent storage of game data. *//*        This method will return HTML 5 local storage if supported or return false if not present.          return: True if HTML 5 local storage is available or false if it is not available.  */function isHtml5StorageAvailable() {    try {        return 'localStorage' in window && window['localStorage'] !== null;    }     catch (e) {        return false;    }}/*     Try and get the storage mechanism. HTML 5 local storage will be used if available.          Return: Some kind of local storage. This is either HTML 5 local storage or a dummy temporary object. */function getStorage() {    if (!isHtml5StorageAvailable) {        /* Dummy temporary local storage object. */        window.localStorage = new Object();            }    return localStorage;}/*     Safe storage of a value into the local storage.      This method protects against the possibility that the browser does not have local storage.        Param : key The unique key used to store the value    Param : value The value to be stored under that key.    Return: The old value as a String if a value was prevously stored under that key.               True if a new value was stored successfully. False if a value failed to be stored. */function store(key, value) {    var storage = getStorage();    var existing = null;    if (key != null && storage != null) {        existing = retrieve(key);               /* In case the fall back store is being used that won't automatically store as a String. */                if (value != null && value != "null") {            value = String(value);        }        storage[key] = value;    }    return existing;}/*    Mechanism to retrieve a value under a specified key.         Return: The value stored under the specified key or null if no value is stored under that key. */function retrieve(key) {    var storage = getStorage();    var value = null;    if (key != null && storage != null) {         value = storage[key];          if (value == "null") {             value = null;             }    }    return value;}/*    Get the int value.        Param: key The unique key used to store the integer value.    Return: The value with the specified key as an integer.  */function getInt(key) {    var value = retrieve(key);    if (value != null) {        try {            return parseInt(value, 10);        }        catch (e) {            return 0;              }    }    else {        return 0;       }}/*    Set an integer value.        Param: key The key used to store the value with the specified value.    Param: value The new integer value to be stored under the specified key.    Return: The old value if any or 0 if not. */function setInt(key, value) {    var existing = getInt(key);    if (value != null) {        try {                store(key, parseInt(value, 10));        }        catch (e) {                    }    }    else {        store(key, null);        }    return existing;}/*    Check if the specified boolean value is set.        Param: key The unique key used to represent the boolean value.    Return: True if the value is present and set to true, false otherwise.  */function isBoolSet(key) {    var value = retrieve(key);    if (value != null) {        try {            return Boolean(value);        }        catch (e) {            return false;              }    }    else {        return false;       }}/*    Set the boolean persistant value with the specified id.        Param: key The key used to uniquely identify the game value.    Param: hasObject Whether or not the player has the specified value set.    Return: The old value of the setting with the specified key. */function setBool(key, value) {    var existing = isBoolSet(key);    try {        store(key, (value != null && Boolean(value)));    }     catch (e) {            }    return existing;}/*    Get the game scene identification number.        Return: The current game scene id.  */function getScene() {    return getInt("scene");}/*    Set the game score.        Param: score The new score that the game is to have.    Return: The old score. */function setScene(id) {    var existing = getScene();    setInt("scene", id);    return existing;}/*    Get the artifacts as an array of artifact ids.        Return: An array of artifact ids.  */function getArtifacts() {    var value = retrieve("artifacts");    if (value != null) {        var rawValues = value.split(",");        var ids = Array(rawValues.length)        for (index = 0; index < rawValues.length; index++) {             try {                ids[index] = parseInt(rawValues[index], 10);                }            catch (e) {                ids[index] = -1;            }        }        return ids;    }    else {        return Array(0)        }}/*    Set the artifacts as either an array of integers or a variable number of integer arguments.        Param: Either a single integer parameter or a variable number of integer arguments.    Return: The old array of artifact id values.  */function setArtifacts() {    var oldValue = getArtifacts();    if (arguments.length == 1) {        var arg = arguments[0];        if (arg instanceof Array) {            store("artifacts", arg.join(","));            }        else {            store("artifacts", arg);        }    }    else {    	var args = Array.prototype.slice.call(arguments);        store("artifacts", args.join(","));    }    return oldValue;}function assert(expected, actual, failureMessage) {    if (!((expected == null) && (actual == null))) {        if (expected instanceof Array && actual instanceof Array) {            if (expected.length != actual.length) {                alert(failureMessage + " expected length: " + expected.length + " actual length: " + actual.length);            }            else {                for (index = 0; index < expected.length; index++) {                    if (expected[index] != actual[index]) {                        alert(failureMessage + " expected element [" + index + "]: " + expected[index] + " actual: " + actual[index]);                        }                }            }        }        else if (expected != actual) {            alert(failureMessage + " expected: " + expected + " actual: " + actual);        }    }}function testApi() {    store("key1", null);    store("key2", null);    store("key3", null);    store("scene", null);    store("artifacts", null);    assert(true, isHtml5StorageAvailable(), "HTML 5 storage failed to be found!");    assert(window.localStorage, getStorage(), "Local storage failed to be retrieved!");    assert(null, store("key1", "value1"), "Storing value with store() returned an old value!");    assert("value1", retrieve("key1"), "The retrieve function did not return the expected value!");    assert(0, setInt("key2", 42), "Using setInt unexpectedly returned and old value!");    assert(42, getInt("key2"), "The getInt function did not return the expected value!");    assert(false, setBool("key3", true), "The setBool function unexpectedly returned an old value!");    assert(true, isBoolSet("key3"), "The isBoolSet function did not return the expected value!");    assert(0, setScene(3), "The setScene function unexpectedly returned an old value!");    assert(3, getScene(), "The getScene function did not return the expected value!");    assert(Array(0), setArtifacts(3) , "The setArtifiacts function unexpectedly returned an old value!");    assert([3], getArtifacts(), "The getArtifacts function did not return the expected value!");    assert([3], setArtifacts(Array(3, 2, 1, 0)), "The setArtifiacts function returned an unexpected value!");    assert(Array(3, 2, 1, 0), getArtifacts(), "The getArtifacts function did not return the expected value!");    assert(Array(3, 2, 1, 0), setArtifacts(1, 9, 8, 1), "The setArtifiacts function returned an unexpected value!");    assert(Array(1, 9, 8, 1), getArtifacts(), "The getArtifacts function did not return the expected value!");}